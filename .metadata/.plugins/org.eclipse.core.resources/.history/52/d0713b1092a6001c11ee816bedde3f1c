package DynamicProgramming;

class KnapsackApp {
	int dp[][]=new int[100][100];
	KnapsackApp() {
		for(int i=0;i<100;i++) {
			for(int j=0;j<100;j++) {
				dp[i][j]=-1;
			}
		}
	}
	
	
	public int recKnapsack_01(int wt[],int val[],int tot_wt,int n){
		if(tot_wt==0 || n==0)
			return 0;
		
		if(wt[n-1]<=tot_wt)
			return Math.max(val[n-1]+recKnapsack_01(wt,val,tot_wt-wt[n-1],n-1),
					recKnapsack_01(wt,val,tot_wt,n-1));
		else
			return recKnapsack_01(wt,val,tot_wt,n-1);
	}
	
	public int memKnapsack_01(int wt[],int val[],int tot_wt,int n){
		if(tot_wt==0 || n==0)
			return 0;
		if(dp[tot_wt][n]!=-1)
			return dp[tot_wt][n];
		
		if(wt[n-1]<=tot_wt)
			return dp[tot_wt][n]=Math.max(val[n-1]+memKnapsack_01(wt,val,tot_wt-wt[n-1],n-1),
					memKnapsack_01(wt,val,tot_wt,n-1));
		else
			return dp[tot_wt][n]=memKnapsack_01(wt,val,tot_wt,n-1);
	}
	
	
	public static void main(String[] args) {
		KnapsackApp ka = new KnapsackApp();
		int wt[] = {3,4,1,7,2};
		int val[] = {15,2,4,2,8};
		int n = wt.length;
		int tot_wt=5;
		System.out.println(ka.recKnapsack_01(wt,val,tot_wt,n));
		System.out.println(ka.memKnapsack_01(wt,val,tot_wt,n));
	}

}
