package DynamicProgramming;
import java.util.*;

public class minSubsetDiff {
	//Arraylist<integer> recArray = new Arraylist<>();
	
	
	
	public boolean recMinSubsetDiff(int wt[],int sum,int n) {
		if(n==0)
			return false;
		if(sum==0) {
			System.out.println("aman");
			return true;
		}
		
		if(wt[n-1]<sum)
			return recMinSubsetDiff(wt,sum,n) || recMinSubsetDiff(wt,sum-wt[n-1],n-1);
		else
			return recMinSubsetDiff(wt,sum,n);

	}
	
//	public int memMinSubsetDiff(int wt[],int sum,int n) {
//		
//		
//	}
//	
//	public int tabMinSubsetDiff(int wt[],int sum,int n) {
//		
//		
//	}
	
	
	
	public void allMinSubsetDiff(int wt[],int n) {
		int sum=0;
		for(int i=0;i<n;i++)
			sum=sum+wt[i];
		
		System.out.println(recMinSubsetDiff(wt,sum/2,n));
//		System.out.println(memMinSubsetDiff(wt,sum/2,n));
//		System.out.println(tabMinSubsetDiff(wt,sum/2,n));
		
		
	}
	

	public static void main(String[] args) {
		minSubsetDiff ob = new minSubsetDiff();
		int wt[]= {3,4,2,1,2};
		int n=wt.length;
		ob.allMinSubsetDiff(wt,n);
	}

}
