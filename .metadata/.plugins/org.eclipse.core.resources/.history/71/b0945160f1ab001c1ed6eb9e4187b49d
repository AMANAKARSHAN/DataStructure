package DynamicProgramming;

public class SubsetSum {
	int dp[][];
	
	public void ArrayInit(int n,int tot_wt) {
		dp = new int[n+1][tot_wt+1];
		for(int i=0;i<n+1;i++) {
			for(int j=0;j<tot_wt+1;j++) {
				dp[i][j]=-1;
			}
		}
	}
	
	public boolean recSubsetSum(int wt[],int tot_wt,int n){
		if(tot_wt==0)
			return true;
		else if(n==0)
			return false;
		
		if(wt[n-1]<=tot_wt)
			return recSubsetSum(wt,tot_wt-wt[n-1],n-1) ||
					recSubsetSum(wt,tot_wt,n-1);
		else
			return recSubsetSum(wt,tot_wt,n-1);
	}
	
	public int memSubsetSum(int wt[],int tot_wt,int n){
		if(tot_wt==0)
			return 1;
		if(n==0)
			return 0;
		
		if(dp[n-1][tot_wt]!=-1)
			return dp[n-1][tot_wt];
		
		if(wt[n-1]<=tot_wt)
			return dp[tot_wt][n]= memSubsetSum(wt,tot_wt-wt[n-1],n-1) ||
					memSubsetSum(wt,tot_wt,n-1);
		else
			return dp[tot_wt][n]=memSubsetSum(wt,tot_wt,n-1);
	}
	

	public static void main(String[] args) {
		SubsetSum ob = new SubsetSum();
		int wt[]= {43,2,31,5,3,8};
		int tot_wt=39;
		int n=wt.length;
		System.out.println(ob.recSubsetSum(wt,tot_wt,n));
		
	}

}
